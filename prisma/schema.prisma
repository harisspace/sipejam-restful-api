generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model notifications {
  id                                  Int      @id @default(autoincrement())
  notification_uid                    String   @unique @default(uuid()) @db.Uuid
  title                               String   @db.VarChar(100)
  message                             String   @db.VarChar(300)
  read                                Boolean  @default(false)
  to_uid                              String   @db.Uuid
  from_uid                            String   @db.Uuid
  payload                             String   @db.Uuid
  created_at                          DateTime @default(now()) @db.Timestamptz(6)
  updated_at                          DateTime @default(now()) @db.Timestamptz(6)
  users_notifications_from_uidTousers users    @relation("notifications_from_uidTousers", fields: [from_uid], references: [user_uid])
  users_notifications_to_uidTousers   users    @relation("notifications_to_uidTousers", fields: [to_uid], references: [user_uid])
}

model systems {
  id              Int               @id @default(autoincrement())
  system_uid      String            @unique @default(uuid()) @db.Uuid
  iot_token       String            @unique @db.VarChar(300)
  name            String            @unique @db.VarChar(250)
  placed          String            @db.VarChar(300)
  system_maker    String            @db.Uuid
  image_uri       String?           @db.VarChar(300)
  status          status            @default(on)
  aplication_id   String?           @unique @db.VarChar(300)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @default(now()) @db.Timestamptz(6)
  users           users             @relation(fields: [system_maker], references: [user_uid])
  speeds1         speeds1[]
  speeds2         speeds2[]
  vehicles1       vehicles1[]
  vehicles2       vehicles2[]
  usersystemlinks usersystemlinks[]
}

model users {
  id                                          Int               @id @default(autoincrement())
  user_uid                                    String            @unique @default(uuid()) @db.Uuid
  username                                    String            @unique @db.VarChar(250)
  email                                       String            @unique @db.VarChar(300)
  password                                    String            @db.VarChar(300)
  user_role                                   role              @default(user)
  image_uri                                   String?           @db.VarChar(300) @default("user.jpg")
  confirmed                                   Boolean           @default(false)
  oauth                                       Boolean           @default(false)
  created_at                                  DateTime          @default(now()) @db.Timestamptz(6)
  updated_at                                  DateTime          @default(now()) @db.Timestamptz(6)
  notifications_notifications_from_uidTousers notifications[]   @relation("notifications_from_uidTousers")
  notifications_notifications_to_uidTousers   notifications[]   @relation("notifications_to_uidTousers")
  systems                                     systems[]
  usersystemlinks                             usersystemlinks[]
}

model usersystemlinks {
  id                  Int      @id @default(autoincrement())
  usersystemlinks_uid String   @unique @default(uuid()) @db.Uuid
  user_uid            String   @db.Uuid
  system_uid          String   @db.Uuid
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)
  system_role         role     @default(admin)
  systems             systems  @relation(fields: [system_uid], references: [system_uid], onDelete: Cascade)
  users               users    @relation(fields: [user_uid], references: [user_uid])
}

model speeds1 {
  id          Int      @id @default(autoincrement())
  speeds1_uid String   @default(uuid()) @db.Uuid @unique
  iot_token   String   @db.VarChar(300)
  speed       Int
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  systems     systems  @relation(fields: [iot_token], references: [iot_token], onDelete: NoAction, onUpdate: NoAction)
}

model speeds2 {
  id          Int      @id @default(autoincrement())
  speeds2_uid String   @unique @db.Uuid @default(uuid())
  iot_token   String   @db.VarChar(300)
  speed       Int
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  systems     systems  @relation(fields: [iot_token], references: [iot_token], onDelete: NoAction, onUpdate: NoAction)
}

model vehicles1 {
  id               Int      @id @default(autoincrement())
  vehicles1_uid    String   @unique @db.Uuid @default(uuid())
  iot_token        String   @db.VarChar(300)
  vehicle          Int
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @db.Timestamptz(6)
  systems          systems @relation(fields: [iot_token], references: [iot_token],onDelete: NoAction, onUpdate: NoAction)
}

model vehicles2 {
  id              Int      @id @default(autoincrement())
  vehicles2_uid   String   @unique @db.Uuid @default(uuid())
  iot_token       String   @db.VarChar(300)
  vehicle         Int
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)
  systems         systems @relation(fields: [iot_token], references: [iot_token], onDelete: NoAction, onUpdate: NoAction)
}

enum role {
  user
  admin
  superadmin
}

enum status {
  on
  off
}
